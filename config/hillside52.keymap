/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SYM 1
#define NUM 2
#define NAV 3
#define ADJ 4
#define LNM 5
#define LBK 6
#define RBK 7


&lt {
    tapping-term-ms = <200>;
    quick-tap-ms    = <200>; // hit within this time to trigger repeat
};

&sl {
    release-after-ms = <2000>;
};

&caps_word {
  continue-list = <UNDERSCORE MINUS>;
};
/ {
  combos {
    compatible = "zmk,combos";
    // -----------------------------------------------------------------------------------------
    // |  0  |  Q  |  W  |  E  |  R  |  T  |                    |  Y  |  U   |  I  |  O  |  P  | BKSP |
    // |  12 |  A  |  S  |  D  |  F  |  G  |                    |  H  |  J   |  K  |  L  |  ;  |  '   |
    // |  24 |  Z  |  X  |  C  |  V  |  B  | 30 |         | 31  |  N  |  M   |  ,  |  .  |  /  | ESC  |
    //             38 |  39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 
    left_combo_esc {
      timeout-ms = <25>;
      key-positions = <14 15>;
      layers = <DEFAULT>;
      bindings = <&lt RBK ESC>;
    };
    right_combo_esc {
      timeout-ms = <25>;
      key-positions = <20 21>;
      layers = <DEFAULT>;
      bindings = <&lt LBK ESC>;
    };

    right_alt_bspc {
      timeout-ms = <25>;
      key-positions = <8 9>;
      layers = <DEFAULT>;
      bindings = <&kp LA(BSPC)>;
    };

    right_ctrl_bspc {
      timeout-ms = <25>;
      key-positions = <9 10>;
      layers = <DEFAULT>;
      bindings = <&kp LC(BSPC)>;
    };

    right_enter {
      timeout-ms = <20>;
      key-positions = <18 19>;
      layers = <DEFAULT>;
      bindings = <&kp RET>;
    };

    left_tab {
      timeout-ms = <20>;
      key-positions = <26 27>;
      layers = <DEFAULT>;
      bindings = <&kp TAB>;
    };

    right_tab {
      timeout-ms = <20>;
      key-positions = <34 35>;
      layers = <DEFAULT>;
      bindings = <&kp TAB>;
    };

    left_slash {
      timeout-ms = <25>;
      key-positions = <2 3>;
      layers = <DEFAULT>;
      bindings = <&kp FSLH>;
    };

    up_dir {
      timeout-ms = <40>;
      key-positions = <33 34 35>;
      layers = <DEFAULT>;
      bindings = <&updir>;
    };

    homedir {
      timeout-ms = <30>;
      layers = <SYM>;
      key-positions = <1 2>;
      bindings = <&homedir>;
    };
  };

  macros {
    ZMK_MACRO(code_key, 
      bindings
        = <&kp GRAVE &kp GRAVE &kp GRAVE>;
    )
    ZMK_MACRO(updir, 
      bindings
        = <&kp DOT &kp DOT &kp FSLH>;
    )
    ZMK_MACRO(homedir, 
      bindings
        = <&kp TILDE &kp FSLH>;
    )

    ZMK_MACRO(pars,
      bindings
      = <&kp LPAR &kp RPAR &kp LEFT>;
    )

    ZMK_MACRO(brack,
      bindings
      = <&kp LBKT &kp RBKT &kp LEFT>;
    )

    ZMK_MACRO(curl,
      bindings
      = <&kp LBRC &kp RBRC &kp LEFT>;
    )
  };
  behaviors {
    code: codegrave {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&code_key>, <&kp>;
    };
    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // include pretty much every key but the middle row
            hold-trigger-key-positions = < 6 7 8 9 10 11 18 19 20 21 22 23 31 32 33 34 35 36 37 45 46 47 48 49 50 51 52 /*top*/ 0 1 2 3 4 5 /*bottom*/ 24 25 26 27 28 29 30 /*thumbs*/38 39 40 41 42 43 44 >; 
    };
    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // include pretty much every key but the middle row
            hold-trigger-key-positions = < 0 1 2 3 4 5 12 13 14 15 16 17  24 25 26 27 28 29 30 38 39 40 41 42 43 44 /*top*/6 7 8 9 10 11 /*bottom*/ 31 32 33 34 35 36 37 /*thumbs*/ 45 46 47 48 49 50 51 52>; // List of keys on the left side of the keyboard
    };
    // quick release sticky key so shift only applies to one key
    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
      };
  };

  keymap {
      compatible = "zmk,keymap";

      default_layer {
          bindings = <
          &lt ADJ TAB  &lt  NUM Q  &lt  NAV W   &lt NUM F    &kp  P        &kp B                      /**/                   &kp J &kp  L       &kp  U          &kp Y          &kp MINUS       &lt ADJ BSPC
          &sl SYM      &lt  NAV A  &lt  SYM R   &hml LCTRL S &hml LGUI T   &kp G  /* 31 32*/          /**/                   &kp M &hmr RGUI N  &hmr RCTRL E    &lt SYM I     &kp O           &kp SQT
          &caps_word   &hml LGUI Z &hml LCTRL X &hml LALT C  &hml LSHFT D  &kp V &key_repeat          /**/      &key_repeat  &kp K &hmr RSHFT H &hmr LALT COMMA &hmr RCTRL DOT &hmr RGUI FSLH  &caps_word
                        &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp DEL  &sl SYM &lt NUM BSPC &lt NAV RET    &skq LSHFT &lt LNM SPC &sl SYM &kp DEL &pars &brack &curl
          >;
      };
      sym_layer {
          bindings = <
          &kp TILDE &kp BSLH  &kp FSLH      &kp COLON   &kp PLUS  &code 0 GRAVE                              &kp BSLH &kp AMPS  &kp STAR    &kp QMARK &kp BSLH &trans
          &trans    &kp AT    &lt RBK PRCNT &kp EXCL    &kp EQUAL &kp PIPE                                   &kp HASH &kp EQUAL &lt LBK DQT &kp UNDER &kp SEMI &trans
          &trans    &kp HASH  &kp MINUS     &kp LT      &kp GT    &kp QMARK &trans                    &trans &kp SEMI &kp CARET &kp DLLR  &trans    &trans &trans
                                  &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans
          >;
      };
      num_layer {
          bindings = <
          &trans &trans   &sk LG(LCTRL) &trans    &trans    &trans                                     &trans   &kp N7   &kp N8 &kp N9 &trans    &trans
          &trans &sk LGUI &sk LALT      &sk LCTRL &sk LSHFT &sk LS(LG(LC(LALT)))                       &kp LBKT &kp N4   &kp N5 &kp N6 &kp COLON &trans
          &trans &trans   &kp LBKT      &kp RBKT  &trans    &trans &trans                       &kp N0 &kp RBKT &kp N1   &kp N2 &kp N3 &kp FSLH  &trans
                        &trans &trans &trans &trans &trans  &hml LSHFT BSPC &kp DOT        &trans &trans &kp N0 &trans &trans &trans &trans
          >;
      };
      navi_layer {
          bindings = <
          &trans &trans   &trans    &sk LALT  &trans    &trans                                        &trans   &kp LS(LC(TAB))    &kp LC(TAB) &kp TAB     &kp GRAVE &trans
          &trans &sk LGUI &sk LALT  &sk LCTRL &sk LSHFT &sk LS(LG(LC(LALT)))                          &kp LEFT &kp DOWN           &kp UP      &kp RIGHT       &trans &trans
          &trans &trans   &trans    &trans    &trans    &trans     &trans                      &trans &trans   &kp HOME           &kp END     &trans          &trans &trans
                        &trans &trans &trans &trans &trans &hml LSHFT BSPC &trans        &trans &kp RET &kp LGUI &trans &trans &trans &trans  
          >;
      };
      adjust_layer {
          bindings = <
          &trans &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &trans &bootloader                               &bootloader &trans       &trans     &trans       &trans &bt BT_CLR
          &trans &bt BT_SEL 3 &bt BT_SEL 4 &trans       &trans &trans                                    &trans      &kp C_PREV   &kp C_PP   &kp C_NEXT   &trans &trans
          &trans &trans       &trans       &trans       &trans &trans &trans                      &trans &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &trans &trans &trans
                                   &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans
          >;
      };
      lnum_layer {
          bindings = <
          &trans  &trans   &trans       &trans    &trans  &trans                                  &trans    &trans  &trans  &trans  &trans  &trans
          &trans  &kp N4   &kp N3       &kp N2    &kp N1  &kp N5                                  &kp N6    &kp N0  &kp N7  &kp N8  &kp N9 &trans
          &trans  &sk LGUI &sk LCTRL    &sk LALT  &sk LSHFT  &trans  &sk LS(LG(LC(LALT)))   &sk LS(LG(LC(LALT)))  &trans &sk LSHFT &sk LALT &sk LCTRL &sk LGUI  &trans
                       &trans &trans &trans &trans &trans &kp N0 &trans    &trans &trans &trans &trans &trans &trans &trans
          >;
      };
      lbrk {
          bindings = <
          &trans  &trans  &kp LBRC  &kp RBRC &trans  &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
          &trans  &trans  &kp LPAR  &kp RPAR &trans  &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
          &trans  &trans  &kp LBKT  &kp RBKT &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                          &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans
          >;
      };
      rbrk {
          bindings = <
          &trans  &trans  &trans  &trans &trans  &trans                                  &trans  &trans  &kp RBRC  &kp LBRC  &trans  &trans
          &trans  &trans  &trans  &trans &trans  &trans                                  &trans  &trans  &kp RPAR  &kp LPAR  &trans  &trans
          &trans  &trans  &trans  &trans &trans  &trans  &trans                  &trans  &trans  &trans  &kp RBKT  &kp LBKT  &trans  &trans
                          &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans
          >;
      };
  };
};
